# Logrotate 配置文件 - 博客系统日志管理
# 适用于 Next.js 15.3.5+ & React 19.1.0+ 应用程序日志轮转

# 全局配置
# 每周轮转
weekly

# 保留 12 个轮转文件 (3个月)
rotate 12

# 压缩轮转的日志文件
compress

# 延迟压缩到下一个轮转周期
delaycompress

# 忽略缺失的日志文件
missingok

# 不轮转空文件
notifempty

# 为轮转的文件创建新文件
create

# 轮转后运行的脚本
sharedscripts

# 应用程序日志
/var/log/blog/*.log {
    # 每日轮转
    daily
    
    # 保留 30 天
    rotate 30
    
    # 压缩
    compress
    delaycompress
    
    # 忽略缺失
    missingok
    notifempty
    
    # 创建新文件，设置权限
    create 644 www-data www-data
    
    # 轮转后重启应用程序以重新打开日志文件
    postrotate
        # 发送 USR1 信号给 Node.js 进程重新打开日志
        if [ -f /var/run/blog.pid ]; then
            kill -USR1 `cat /var/run/blog.pid`
        fi
        
        # 或者重启 PM2 进程
        if command -v pm2 >/dev/null 2>&1; then
            pm2 reload blog >/dev/null 2>&1 || true
        fi
        
        # 或者重启 systemd 服务
        if systemctl is-active --quiet blog >/dev/null 2>&1; then
            systemctl reload blog >/dev/null 2>&1 || true
        fi
    endscript
}

# Next.js 构建日志
/var/log/blog/build.log {
    weekly
    rotate 4
    compress
    delaycompress
    missingok
    notifempty
    create 644 www-data www-data
    
    # 构建日志不需要特殊处理
}

# 错误日志 (高优先级，保留更长时间)
/var/log/blog/error.log {
    daily
    rotate 90
    compress
    delaycompress
    missingok
    notifempty
    create 644 www-data www-data
    
    # 错误日志轮转后发送通知
    postrotate
        # 检查新的错误日志是否有严重错误
        if [ -f /var/log/blog/error.log ]; then
            error_count=$(grep -c "ERROR\|FATAL" /var/log/blog/error.log 2>/dev/null || echo 0)
            if [ "$error_count" -gt 0 ]; then
                echo "发现 $error_count 个错误，请检查 /var/log/blog/error.log" | \
                    mail -s "博客应用错误日志警报" admin@yourdomain.com 2>/dev/null || true
            fi
        fi
    endscript
}

# 访问日志
/var/log/blog/access.log {
    daily
    rotate 7
    compress
    delaycompress
    missingok
    notifempty
    create 644 www-data www-data
    
    # 生成访问统计报告
    postrotate
        if [ -f /var/log/blog/access.log.1 ]; then
            # 生成简单的访问统计
            /opt/blog/scripts/generate-stats.sh /var/log/blog/access.log.1 > /var/log/blog/daily-stats.log 2>/dev/null || true
        fi
    endscript
}

# 性能日志
/var/log/blog/performance.log {
    daily
    rotate 30
    compress
    delaycompress
    missingok
    notifempty
    create 644 www-data www-data
    
    # 性能日志分析
    postrotate
        if [ -f /var/log/blog/performance.log.1 ]; then
            # 检查性能问题
            slow_requests=$(grep "response_time" /var/log/blog/performance.log.1 | \
                awk '$NF > 3000' | wc -l 2>/dev/null || echo 0)
            
            if [ "$slow_requests" -gt 100 ]; then
                echo "昨日发现 $slow_requests 个慢请求 (>3s)，请检查性能" | \
                    mail -s "博客性能警报" admin@yourdomain.com 2>/dev/null || true
            fi
        fi
    endscript
}

# PM2 日志
/home/*/.pm2/logs/*.log {
    daily
    rotate 14
    compress
    delaycompress
    missingok
    notifempty
    create 644 
    
    # 按用户轮转
    su root root
    
    postrotate
        # 通知 PM2 重新加载日志
        if command -v pm2 >/dev/null 2>&1; then
            pm2 reloadLogs >/dev/null 2>&1 || true
        fi
    endscript
}

# Docker 容器日志 (如果使用 Docker)
/var/lib/docker/containers/*/*-json.log {
    daily
    rotate 7
    compress
    delaycompress
    missingok
    notifempty
    copytruncate
    
    # Docker 日志需要特殊处理
    postrotate
        # 重启 Docker 服务以重新打开日志文件
        systemctl reload docker >/dev/null 2>&1 || true
    endscript
}

# Nginx 日志 (如果使用 Nginx 代理)
/var/log/nginx/blog*.log {
    daily
    rotate 14
    compress
    delaycompress
    missingok
    notifempty
    create 644 www-data adm
    
    postrotate
        # 重新加载 Nginx 配置
        if [ -f /var/run/nginx.pid ]; then
            kill -USR1 `cat /var/run/nginx.pid`
        fi
        
        # 或者使用 systemctl
        systemctl reload nginx >/dev/null 2>&1 || true
    endscript
}

# 监控日志
/var/log/blog/monitoring/*.log {
    weekly
    rotate 8
    compress
    delaycompress
    missingok
    notifempty
    create 644 www-data www-data
    
    # 清理旧的监控数据
    postrotate
        # 删除超过 60 天的监控临时文件
        find /tmp/monitoring -name "*.tmp" -mtime +60 -delete 2>/dev/null || true
    endscript
}

# 安全日志
/var/log/blog/security.log {
    daily
    rotate 365
    compress
    delaycompress
    missingok
    notifempty
    create 600 root root
    
    # 安全日志需要特殊权限和处理
    postrotate
        # 检查安全事件
        if [ -f /var/log/blog/security.log.1 ]; then
            security_events=$(grep -c "SECURITY\|INTRUSION\|ATTACK" /var/log/blog/security.log.1 2>/dev/null || echo 0)
            if [ "$security_events" -gt 0 ]; then
                echo "发现 $security_events 个安全事件，请立即检查" | \
                    mail -s "博客安全警报 - 紧急" security@yourdomain.com 2>/dev/null || true
            fi
        fi
    endscript
}

# 数据库日志 (如果使用数据库)
/var/log/postgresql/postgresql-*.log {
    weekly
    rotate 12
    compress
    delaycompress
    missingok
    notifempty
    create 640 postgres postgres
    
    postrotate
        # PostgreSQL 特殊处理
        systemctl reload postgresql >/dev/null 2>&1 || true
    endscript
}

# 系统日志中的应用程序相关内容
/var/log/syslog {
    daily
    rotate 7
    compress
    delaycompress
    missingok
    notifempty
    
    # 系统日志轮转后重启 rsyslog
    postrotate
        systemctl reload rsyslog >/dev/null 2>&1 || true
    endscript
}

# 备份日志
/var/log/blog/backup.log {
    monthly
    rotate 12
    compress
    delaycompress
    missingok
    notifempty
    create 644 www-data www-data
    
    # 检查备份状态
    postrotate
        if [ -f /var/log/blog/backup.log.1 ]; then
            failed_backups=$(grep -c "FAILED\|ERROR" /var/log/blog/backup.log.1 2>/dev/null || echo 0)
            if [ "$failed_backups" -gt 0 ]; then
                echo "上月有 $failed_backups 个备份失败，请检查备份系统" | \
                    mail -s "备份系统警报" backup@yourdomain.com 2>/dev/null || true
            fi
        fi
    endscript
}

# 清理脚本 - 定期清理旧文件
# 此部分可以单独创建为 cron 任务
# 0 2 * * 0 /usr/sbin/logrotate -f /etc/logrotate.d/blog

# 特殊配置说明：
# 1. 所有日志文件都设置了合适的权限
# 2. 错误和安全日志保留时间更长
# 3. 轮转后会自动重启相关服务
# 4. 包含了基本的日志分析和警报
# 5. 支持多种部署方式 (PM2, Docker, systemd)

# 使用方法：
# 1. 将此文件复制到 /etc/logrotate.d/blog
# 2. 确保日志目录存在: mkdir -p /var/log/blog
# 3. 设置正确的权限: chown -R www-data:www-data /var/log/blog
# 4. 测试配置: logrotate -d /etc/logrotate.d/blog
# 5. 强制轮转测试: logrotate -f /etc/logrotate.d/blog