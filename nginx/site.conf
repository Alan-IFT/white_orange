# 博客站点配置 - 适配 Nginx 1.18.0 (Ubuntu)
# 针对 991217.xyz 域名冲突问题的优化配置

# HTTP 重定向到 HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name yourdomain.com www.yourdomain.com;
    
    # 强制重定向到 HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS 主站点
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name yourdomain.com www.yourdomain.com;
    
    # SSL 证书配置 (需要替换为实际路径)
    ssl_certificate /etc/ssl/certs/yourdomain.com.crt;
    ssl_certificate_key /etc/ssl/private/yourdomain.com.key;
    
    # SSL 安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # 安全头部
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # CSP 头部 (从 security-config.ts 生成)
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com https://www.google-analytics.com https://cdn.vercel-analytics.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: blob: https: https://images.unsplash.com https://cdn.example.com https://r2.cloudflarestorage.com; font-src 'self' https://fonts.gstatic.com; connect-src 'self' https://www.google-analytics.com https://vitals.vercel-analytics.com https://api.github.com; media-src 'self' https:; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none'; upgrade-insecure-requests" always;
    
    # 根目录
    root /var/www/blog;\n    index index.html;\n    
    # 字符集
    charset utf-8;
    
    # 日志文件
    access_log /var/log/nginx/blog.access.log main;
    error_log /var/log/nginx/blog.error.log;
    
    # Gzip 压缩
    gzip on;
    gzip_comp_level 6;
    gzip_min_length 1000;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        application/font-woff
        application/font-woff2;
    
    # 静态文件缓存策略
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # 预压缩文件支持
        gzip_static on;
        
        # 防盗链 (可选)
        # valid_referers none blocked yourdomain.com *.yourdomain.com;
        # if ($invalid_referer) {
        #     return 403;
        # }
    }
    
    # Next.js 静态导出模式路由
    location / {
        try_files $uri $uri.html $uri/index.html @nextjs;
        
        # 限流
        limit_req zone=general burst=5 nodelay;
        
        # 缓存配置
        expires 10m;
        add_header Cache-Control "public, must-revalidate";
    }
    
    # API 路由 (如果使用服务器模式)
    location /api/ {
        limit_req zone=api burst=10 nodelay;
        
        proxy_pass http://nextjs_upstream;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;\n        \n        # 超时设置\n        proxy_connect_timeout 30s;\n        proxy_send_timeout 30s;\n        proxy_read_timeout 30s;\n    }\n    \n    # Next.js 服务器后备 (服务器模式)\n    location @nextjs {\n        proxy_pass http://nextjs_upstream;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n        \n        # 缓存设置\n        proxy_cache blog_cache;\n        proxy_cache_valid 200 302 10m;\n        proxy_cache_valid 404 1m;\n        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;\n        proxy_cache_lock on;\n        \n        # 超时设置\n        proxy_connect_timeout 30s;\n        proxy_send_timeout 30s;\n        proxy_read_timeout 30s;\n    }\n    \n    # 健康检查端点\n    location /health {\n        access_log off;\n        return 200 \"healthy\\n\";\n        add_header Content-Type text/plain;\n    }\n    \n    # RSS 和 Sitemap\n    location ~* \\.(xml|rss)$ {\n        expires 1h;\n        add_header Cache-Control \"public\";\n    }\n    \n    # 安全配置\n    location ~ /\\. {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n    \n    # 防止访问敏感文件\n    location ~* \\.(log|conf|sql|tar|gz|bak)$ {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n    \n    # robots.txt\n    location = /robots.txt {\n        expires 1d;\n        add_header Cache-Control \"public\";\n    }\n    \n    # favicon\n    location = /favicon.ico {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        access_log off;\n    }\n    \n    # 错误页面\n    error_page 404 /404.html;\n    error_page 500 502 503 504 /500.html;\n    \n    # 自定义错误页面位置\n    location = /404.html {\n        internal;\n    }\n    \n    location = /500.html {\n        internal;\n    }\n}\n\n# 解决域名冲突的专用配置 (针对 991217.xyz 冲突警告)\n# 如果你的服务器上有其他使用相同域名的配置，请确保只有一个配置处理特定域名\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name 991217.xyz;  # 如果这是冲突的域名\n    \n    # 可以选择重定向到主域名或返回 444 (关闭连接)\n    return 444;\n    # 或者重定向: return 301 https://yourdomain.com$request_uri;\n}"